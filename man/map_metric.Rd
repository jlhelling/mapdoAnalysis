% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fct_map.R
\name{map_metric}
\alias{map_metric}
\title{Add a metric layer with custom symbology to a map.}
\usage{
map_metric(
  map,
  wms_params = params_wms()$metric,
  cql_filter = "",
  sld_body = "",
  data_axis
)
}
\arguments{
\item{map}{A leaflet map object to which the metric layer will be added.}

\item{wms_params}{A list containing WMS parameters for the metric layer. If not provided, default parameters are retrieved using the \code{\link{params_wms}} function.}

\item{cql_filter}{A character string representing a CQL filter to apply to the metric layer.}

\item{sld_body}{A character string representing the SLD (Styled Layer Descriptor) body for custom styling of the metric layer.}

\item{data_axis}{A data axis to display on the map.}
}
\value{
A leaflet map object with the metric layer added.
}
\description{
This function adds a metric layer with custom symbology to a leaflet map. It allows you to specify custom parameters for the Web Map Service (WMS) request, apply a CQL (Common Query Language) filter, and provide a custom SLD (Styled Layer Descriptor) body for styling the layer. Additionally, you can specify the data axis to display on the map.
}
\examples{
library(leaflet)
library(dplyr)
library(sf)
# Create init bassin map
map_bassin <- map_init_bassins(bassins_data = bassin_hydrographique,
                               id_logo_ign_remonterletemps = "logo_ign_remonterletemps")

# simulate bassin selected
selected_bassin <- bassin_hydrographique

# get centroid coordinate (in shiny see leaflet mapid_shape_click)
centre <- sf::st_centroid(selected_bassin)
centre_coord <- as.data.frame(st_coordinates(centre)) \%>\%
  rename("lng" = X,
         "lat" = Y)

# map region
map_region <- map_add_regions_in_bassin(map = map_bassin,
                                        bassins_data = bassin_hydrographique,
                                        bassin_click = centre_coord,
                                        regions_data = region_hydrographique)

# simulate selected region
selected_region <- region_hydrographique

# get centroid coordinate (in shiny see leaflet mapid_shape_click)
centre_region <- sf::st_centroid(selected_bassin)
centre_region_coord <- as.data.frame(st_coordinates(centre_region)) \%>\%
  rename("lng" = X,
         "lat" = Y)
centre_region_coord$id <- 11

con = db_con()
# get ROE in region
roe_region <- data_get_roe_in_region(centre_region_coord$id, con = con)
# get hydro sites in region
hydro_sites_region <- data_get_hydro_sites(centre_region_coord$id, con = con)


# map the element in the region clicked
map <- map_region_clicked(map = map_region,
                          region_click = centre_region_coord,
                          selected_region_feature = selected_region,
                          regions_data = region_hydrographique,
                          roe_region = roe_region,
                          hydro_sites_region = hydro_sites_region)
map

# build geoserver WMS filter
cql_filter=paste0("gid_region=", selected_region[["gid"]])

# build geoserver SLD symbology
sld_body <- sld_get_style(breaks = sld_get_quantile_metric(
                                    selected_region_id = selected_region[["gid"]],
                                    selected_metric = "active_channel_width",
                                    con = con),
                          colors = sld_get_quantile_colors(
                                    quantile_breaks = sld_get_quantile_metric(
                                       selected_region_id = selected_region[["gid"]],
                                       selected_metric = "active_channel_width",
                                       con = con)),
                          metric = "active_channel_width")
DBI::dbDisconnect(con)

# Network axis by region
network_region_axis <- network_axis \%>\%
  filter(gid_region == selected_region[["gid"]])

# Add metric with quantile symbology
# wms_params = params_wms()$metric_basic with sld_body = NULL for default blue style$
map_metric <- map_metric(map = map,
                         wms_params = params_wms()$metric,
                         cql_filter = cql_filter,
                         sld_body = sld_body,
                         data_axis = network_region_axis)
map_metric

}
